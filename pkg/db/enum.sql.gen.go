// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: enum.sql

package db

import (
	"context"
)

const listAttributeTypes = `-- name: ListAttributeTypes :many
SELECT attribute_type_id, attribute_type_name
FROM attribute_type
`

func (q *Queries) ListAttributeTypes(ctx context.Context) ([]AttributeType, error) {
	rows, err := q.db.QueryContext(ctx, listAttributeTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttributeType{}
	for rows.Next() {
		var i AttributeType
		if err := rows.Scan(&i.AttributeTypeID, &i.AttributeTypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommunicationTypes = `-- name: ListCommunicationTypes :many
SELECT communication_type_id, communication_type_name
FROM communication_type
`

func (q *Queries) ListCommunicationTypes(ctx context.Context) ([]CommunicationType, error) {
	rows, err := q.db.QueryContext(ctx, listCommunicationTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommunicationType{}
	for rows.Next() {
		var i CommunicationType
		if err := rows.Scan(&i.CommunicationTypeID, &i.CommunicationTypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntityTypes = `-- name: ListEntityTypes :many
SELECT entity_type_id, entity_type_name
FROM entity_type
`

func (q *Queries) ListEntityTypes(ctx context.Context) ([]EntityType, error) {
	rows, err := q.db.QueryContext(ctx, listEntityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntityType{}
	for rows.Next() {
		var i EntityType
		if err := rows.Scan(&i.EntityTypeID, &i.EntityTypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRelationshipTypes = `-- name: ListRelationshipTypes :many
SELECT relationship_type_id, relationship_type_name
FROM relationship_type
`

func (q *Queries) ListRelationshipTypes(ctx context.Context) ([]RelationshipType, error) {
	rows, err := q.db.QueryContext(ctx, listRelationshipTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RelationshipType{}
	for rows.Next() {
		var i RelationshipType
		if err := rows.Scan(&i.RelationshipTypeID, &i.RelationshipTypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedAttributeTypes = `-- name: SeedAttributeTypes :exec
INSERT
  OR IGNORE INTO attribute_type (attribute_type_name)
VALUES ('USER_EXTERNAL_ID')
`

func (q *Queries) SeedAttributeTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, seedAttributeTypes)
	return err
}

const seedCommunicationTypes = `-- name: SeedCommunicationTypes :exec
INSERT
  OR IGNORE INTO communication_type (communication_type_name)
VALUES ('EMAIL'),
  ('SLACK')
`

func (q *Queries) SeedCommunicationTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, seedCommunicationTypes)
	return err
}

const seedEntityTypes = `-- name: SeedEntityTypes :exec
INSERT
  OR IGNORE INTO entity_type (entity_type_name)
VALUES ('APPLICATION'),
  ('TEAM'),
  ('USER')
`

func (q *Queries) SeedEntityTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, seedEntityTypes)
	return err
}

const seedRelationshipTypes = `-- name: SeedRelationshipTypes :exec
INSERT
  OR IGNORE INTO relationship_type (relationship_type_name)
VALUES ('DEPENDS_ON'),
  ('OWNS'),
  ('SUPERVISES')
`

func (q *Queries) SeedRelationshipTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, seedRelationshipTypes)
	return err
}
