// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: attribute.sql

package db

import (
	"context"
)

const listAttributesByEntityID = `-- name: ListAttributesByEntityID :many
SELECT attribute.attribute_id, attribute.entity_id, attribute.attribute_type_id, attribute.attribute_value,
  attribute_type.attribute_type_name
FROM attribute
  INNER JOIN attribute_type ON attribute.attribute_type_id = attribute_type.attribute_type_id
WHERE entity_id = ?1
`

type ListAttributesByEntityIDRow struct {
	AttributeID       int64
	EntityID          int64
	AttributeTypeID   int64
	AttributeValue    string
	AttributeTypeName string
}

func (q *Queries) ListAttributesByEntityID(ctx context.Context, entityID int64) ([]ListAttributesByEntityIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listAttributesByEntityID, entityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAttributesByEntityIDRow{}
	for rows.Next() {
		var i ListAttributesByEntityIDRow
		if err := rows.Scan(
			&i.AttributeID,
			&i.EntityID,
			&i.AttributeTypeID,
			&i.AttributeValue,
			&i.AttributeTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
