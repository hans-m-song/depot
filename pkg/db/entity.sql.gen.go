// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entity.sql

package db

import (
	"context"
)

const createEntity = `-- name: CreateEntity :one
INSERT INTO entity (entity_type_id, entity_name)
VALUES (?1, ?2)
RETURNING entity_id, entity_name, entity_type_id
`

type CreateEntityParams struct {
	EntityTypeID int64
	EntityName   string
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, createEntity, arg.EntityTypeID, arg.EntityName)
	var i Entity
	err := row.Scan(&i.EntityID, &i.EntityName, &i.EntityTypeID)
	return i, err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entity
WHERE entity_id = ?1
`

func (q *Queries) DeleteEntity(ctx context.Context, entityID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, entityID)
	return err
}

const getEntityByID = `-- name: GetEntityByID :one
SELECT entity.entity_id, entity.entity_name, entity.entity_type_id,
  entity_type.entity_type_name
FROM entity
  INNER JOIN entity_type ON entity.entity_type_id = entity_type.entity_type_id
WHERE entity.entity_id = ?1
LIMIT 1
`

type GetEntityByIDRow struct {
	EntityID       int64
	EntityName     string
	EntityTypeID   int64
	EntityTypeName string
}

func (q *Queries) GetEntityByID(ctx context.Context, entityID int64) (GetEntityByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getEntityByID, entityID)
	var i GetEntityByIDRow
	err := row.Scan(
		&i.EntityID,
		&i.EntityName,
		&i.EntityTypeID,
		&i.EntityTypeName,
	)
	return i, err
}

const getEntityByName = `-- name: GetEntityByName :one
SELECT entity.entity_id, entity.entity_name, entity.entity_type_id,
  entity_type.entity_type_name
FROM entity
  INNER JOIN entity_type ON entity.entity_type_id = entity_type.entity_type_id
WHERE entity_name = ?1
LIMIT 1
`

type GetEntityByNameRow struct {
	EntityID       int64
	EntityName     string
	EntityTypeID   int64
	EntityTypeName string
}

func (q *Queries) GetEntityByName(ctx context.Context, entityName string) (GetEntityByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getEntityByName, entityName)
	var i GetEntityByNameRow
	err := row.Scan(
		&i.EntityID,
		&i.EntityName,
		&i.EntityTypeID,
		&i.EntityTypeName,
	)
	return i, err
}

const listEntities = `-- name: ListEntities :many
SELECT entity.entity_id, entity.entity_name, entity.entity_type_id,
  entity_type.entity_type_name
FROM entity
  INNER JOIN entity_type ON entity.entity_type_id = entity_type.entity_type_id
LIMIT ?2 OFFSET ?1
`

type ListEntitiesParams struct {
	Offset int64
	Limit  int64
}

type ListEntitiesRow struct {
	EntityID       int64
	EntityName     string
	EntityTypeID   int64
	EntityTypeName string
}

func (q *Queries) ListEntities(ctx context.Context, arg ListEntitiesParams) ([]ListEntitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, listEntities, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesRow{}
	for rows.Next() {
		var i ListEntitiesRow
		if err := rows.Scan(
			&i.EntityID,
			&i.EntityName,
			&i.EntityTypeID,
			&i.EntityTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntitiesByType = `-- name: ListEntitiesByType :many
SELECT entity.entity_id, entity.entity_name, entity.entity_type_id,
  entity_type.entity_type_name
FROM entity
  INNER JOIN entity_type ON entity.entity_type_id = entity_type.entity_type_id
WHERE entity.entity_type_id = ?1
LIMIT ?3 OFFSET ?2
`

type ListEntitiesByTypeParams struct {
	EntityTypeID int64
	Offset       int64
	Limit        int64
}

type ListEntitiesByTypeRow struct {
	EntityID       int64
	EntityName     string
	EntityTypeID   int64
	EntityTypeName string
}

func (q *Queries) ListEntitiesByType(ctx context.Context, arg ListEntitiesByTypeParams) ([]ListEntitiesByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, listEntitiesByType, arg.EntityTypeID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesByTypeRow{}
	for rows.Next() {
		var i ListEntitiesByTypeRow
		if err := rows.Scan(
			&i.EntityID,
			&i.EntityName,
			&i.EntityTypeID,
			&i.EntityTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntityName = `-- name: UpdateEntityName :one
UPDATE entity
SET entity_name = ?1
WHERE entity_id = ?2
RETURNING entity_id, entity_name, entity_type_id
`

type UpdateEntityNameParams struct {
	EntityName string
	EntityID   int64
}

func (q *Queries) UpdateEntityName(ctx context.Context, arg UpdateEntityNameParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, updateEntityName, arg.EntityName, arg.EntityID)
	var i Entity
	err := row.Scan(&i.EntityID, &i.EntityName, &i.EntityTypeID)
	return i, err
}
